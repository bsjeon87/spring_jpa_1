
엔티티 설계 시 주의점.

- 엔티티는 가급적 setter를 사용하지 말자.
(유지보수 어려움.)
- ** 모든 연관관계는 지연로딩으로 설정. => 필요시 fetch join / 엔티티 그래프 기능 사용.
  (OneToMany / ManyToMany / OneToOne 별로 fetch전략이 다름. => 명시적으로 fetch = FetchType.LAZY를  적용하자..)
- 컬렉션은 필드에서 초기화할것.
   (null exception 피하기위해
   / ****하이버네이트의 경우 영속성 컨텍스트에 들어갈때 컬렉션을 하이버네이트에서 래핑하는 클래스로 변경함.
    =>만약 하이버네이트가 변경을 해두었는데, 재 생성하거나 셋하면 제대로 운용되지 않을 수 있음.)

구현 요구사항
회원 기능
- 회원 등록/ 조회
상품 기능
- 상품 등록/상품 수정/ 상품 조회
 주문 기능
- 상품 주문/주문 내역 죄회/ 주문 취소

* 예제 단순화를 위해 구현 X
(로그인과 권한 관리 / 파라미터 검증과 예외처리 단순화 /
 상품은 도서만 사용 / 카테고리는 사용X / 배송 정보는 사용X )

* 애플리케이션 아키텍쳐
계층형 구조사용.
Controller -> Service -> Repository -> DB
    |            |          |
    |            |          |
              Domain
controller, web : 웹 계층. ( service / respository로 바로 단반향 접근도 가능하도록 함(단순한부분을 굳이 service를 거치지않게). -> 유연하게..)
service: 비즈니스 로직, 트랜잭션 처리
repository: JPA를 직접 사용하는 계층, 엔티티 매니저 사용
domain:엔티티가 모여있는 계층, 모든 계층에서 사용.

각 도메인 별 개발순서: 엔티티, 서비스, 리포지토리 계층을 개발, 테스트케이스를 작성해서 검증,
전체 개발 순서: 회원 도메인 개발 -> 상품도메인 개발 -> 주문 도메인 개발 -> 웹계층 개발 -> API 개발 기본 -> API 개발 고급

